using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace SDGameTextToEnum
{
    class ModLocalizationDB : LocalizationDB
    {
        readonly List<Localization> ModText = new List<Localization>();
        public int NumModLocalizations => ModText.Count;

        public ModLocalizationDB(LocalizationDB gen, string name) : base(gen, name)
        {
        }

        public bool AddFromModYaml(string yamlFile, string nameIdPrefix, bool logMerge = false)
        {
            List<TextToken> tokens = TextToken.FromYaml(yamlFile);
            if (tokens.Count == 0)
                return false;
            AddModLocalizations(tokens, nameIdPrefix, logMerge);
            return true;
        }

        public void AddModLocalizations(IEnumerable<TextToken> localizations, 
                                        string nameIdPrefix, bool logMerge = false)
        {
            // build ModTexts
            var uniqueToMod = new List<TextToken>();
            foreach (TextToken token in localizations)
            {
                if (GetLocalization(LocalizedText, token.Id, out Localization vanilla))
                    token.NameId = vanilla.NameId; // keep NameId from vanilla
                else
                    uniqueToMod.Add(token); // this is unique to the mod
                AddLocalization(ModText, token, nameIdPrefix, logMerge);
            }
        }

        public void FinalizeModLocalization()
        {
            // add in missing translations
            foreach (Localization mod in ModText)
            {
                if (GetLocalization(LocalizedText, mod.Id, out Localization vanilla))
                {
                    foreach (Translation tr in vanilla.Translations)
                        if (!mod.HasLang(tr.Lang))
                            mod.AddTranslation(tr);
                }
            }

            // NOTE: not really worth it actually
            bool shouldRemoveDuplicates = false;
            if (shouldRemoveDuplicates)
            {
                // then remove ModTexts which are complete duplicates from vanilla
                int numRemoved = ModText.RemoveAll(mod =>
                {
                    Localization dup = LocalizedText.FirstOrDefault(vanilla => vanilla.Equals(mod));
                    if (dup == null)
                        return false;
                    Log.Write(ConsoleColor.Gray, $"{Name}: remove duplicate {mod.Id} {mod.NameId}"
                                                +$"\n  mod: {mod.Translations[0].Text}"
                                                +$"\n  dup: {dup.Translations[0].Text}");
                    return true;
                });
                if (numRemoved > 0)
                    Log.Write(ConsoleColor.Gray, $"{Name}: removed {numRemoved} text entries that already matched vanilla text");
            }
        }

        public override string GetNameId(int id)
        {
            if (GetLocalization(ModText, id, out Localization loc))
                return loc.NameId;
            return base.GetNameId(id);
        }

        /// <summary>
        /// Uses all recorded mod text data and writes it to a new YAML file
        /// Vanilla entries are not written
        /// </summary>
        /// <param name="outPath"></param>
        public void ExportModYaml(string outPath)
        {
            var sw = new StringWriter();
            sw.WriteLine( "# Version 1");
            sw.WriteLine($"# This file was auto-generated by SDGameTextToEnum.exe");
            sw.WriteLine( "# This Mod YAML only contains overriding text entries, check BlackBox YAML for existing ones");
            WriteYamlLoc(sw, ModText);
            WriteToFile(sw, outPath);
        }

        public void ExportMissingModYaml(string lang, string outPath)
        {
            var missing = GetMissingLocalizations(lang, ModText);
            if (missing.Count == 0)
            {
                File.Delete(outPath);
                return;
            }

            var sw = new StringWriter();
            sw.WriteLine( "# Version 1");
            sw.WriteLine($"# This file was auto-generated by SDGameTextToEnum.exe");
            WriteMissingYamlLoc(sw, lang, missing);
            WriteToFile(sw, outPath);
        }
    }
}
