using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace SDGameTextToEnum
{
    class ModTextExporter : EnumGenerator
    {
        readonly List<Localization> ModText = new List<Localization>();

        public ModTextExporter(EnumGenerator gen, string name) : base(gen)
        {
            Name = name;
        }

        public void AddModLocalizations(IEnumerable<LangToken> localizations)
        {
            int numIgnored = 0;
            foreach ((string lang, int id, string text) in localizations)
            {
                if (GetLocalization(LocalizedText, id, out Localization vanilla))
                {
                    if (vanilla.TryGetText(lang, out LangText vanillaText) &&
                        vanillaText.Text.Trim() == text.Trim())
                    {
                        ++numIgnored;
                        continue; // duplicate text, ignore silently
                    }
                }

                if (GetLocalization(ModText, id, out Localization loc))
                    loc.AddText(lang, id, text);
                else
                    AddLocalization(lang, id, vanilla?.NameId, text);
            }

            if (numIgnored > 0)
                Log.Write(ConsoleColor.Gray, $"{Name}: Ignored {numIgnored} text entries that already match vanilla text");
        }

        /// <summary>
        /// Uses all recorded mod text data and writes it to a new YAML file
        /// Vanilla entries are not written
        /// </summary>
        /// <param name="outPath"></param>
        public void ExportModYaml(string outPath)
        {
            var sw = new StringWriter();
            sw.WriteLine( "# Version 1");
            sw.WriteLine($"# This file was auto-generated by SDGameTextToEnum.exe and is in sync with {Name}.cs");
            sw.WriteLine( "# This Mod YAML only contains overriding text entries, check BlackBox YAML for existing ones");
            WriteYamlLoc(sw, ModText);
            File.WriteAllText(outPath, sw.ToString(), Encoding.UTF8);
            Log.Write(ConsoleColor.Green, $"Wrote {outPath}");
        }
    }
}
