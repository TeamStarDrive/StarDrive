using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Ship_Game.Tools.Localization
{
    public partial class LocalizationDB
    {
        protected static void WriteToFile(StringWriter sw, string outPath)
        {
            File.WriteAllText(outPath, sw.ToString(), Encoding.UTF8);
            Log.Write(ConsoleColor.Green, $"Wrote {outPath}");
        }

        /// <summary>
        /// Uses all the collected Localization data to output a new C# Enum file
        /// </summary>
        /// <param name="outPath"></param>
        public void ExportCsharp(string outPath)
        {
            var sw = new StringWriter();
            sw.WriteLine( "// ReSharper disable UnusedMember.Global");
            sw.WriteLine( "// ReSharper disable IdentifierTypo");
            sw.WriteLine( "// ReSharper disable CommentTypo");
            sw.WriteLine($"namespace {Namespace}");
            sw.WriteLine( "{");
            sw.WriteLine( "    /// <summary>");
            sw.WriteLine( "    /// This file was auto-generated by SDGameTextToEnum.exe");
            sw.WriteLine( "    /// </summary>");
            sw.WriteLine($"    public enum {Name}");
            sw.WriteLine( "    {");
            foreach (LocText loc in LocalizedText)
            {
                sw.WriteLine($"        /// <summary>{loc.Comment}</summary>");
                if (loc.Id > 0)
                    sw.WriteLine($"        {loc.NameId} = {loc.Id},");
            }
            sw.WriteLine("    }");
            sw.WriteLine("}");
            WriteToFile(sw, outPath);
        }

        /// <summary>
        /// Uses all the generated Enum data to output a new YAML format file
        /// </summary>
        /// <param name="outPath"></param>
        public void ExportYaml(string outPath)
        {
            var sw = new StringWriter();
            sw.WriteLine( "# Version 1");
            sw.WriteLine($"# This file was auto-generated by SDGameTextToEnum.exe");
            WriteYamlLoc(sw, LocalizedText);
            WriteToFile(sw, outPath);
        }

        public void ExportMissingTranslationsYaml(string lang, string outPath)
        {
            var missing = GetMissingLocalizations(lang, LocalizedText);
            if (missing.Count == 0)
            {
                File.Delete(outPath);
                return;
            }

            var sw = new StringWriter();
            sw.WriteLine( "# Version 1");
            sw.WriteLine($"# This file was auto-generated by SDGameTextToEnum.exe");
            WriteMissingYamlLoc(sw, lang, missing);
            WriteToFile(sw, outPath);
        }
        
        protected void WriteYamlLoc(StringWriter sw, List<LocText> localizations)
        {
            foreach (LocText loc in localizations)
            {
                sw.WriteLine($"{loc.NameId}:");
                sw.WriteLine($" Id: {loc.Id}");
                foreach (Translation lt in loc.Translations)
                {
                    sw.WriteLine($" {lt.Lang}: {lt.YamlString}");
                }
            }
        }

        protected List<LocText> GetMissingLocalizations(string lang, List<LocText> localizations)
        {
            var missing = new List<LocText>();
            foreach (LocText loc in localizations)
                if (!loc.TryGetText(lang, out Translation t) || string.IsNullOrEmpty(t.Text))
                    missing.Add(loc);
            return missing;
        }
        
        protected void WriteMissingYamlLoc(StringWriter sw, string lang, List<LocText> missing)
        {
            foreach (LocText m in missing)
            {
                Translation eng = m.GetText("ENG");
                sw.WriteLine($"{m.NameId}:");
                sw.WriteLine($" Id: {m.Id}");
                sw.WriteLine($" {lang}: \"\" # ENG: {eng.YamlString}");
            }
        }

        /// <summary>
        /// Uses all recorded mod text data and writes it to a new YAML file
        /// Vanilla entries are not written
        /// </summary>
        /// <param name="outPath"></param>
        public void ExportModYaml(string outPath)
        {
            var sw = new StringWriter();
            sw.WriteLine( "# Version 1");
            sw.WriteLine($"# This file was auto-generated by SDGameTextToEnum.exe");
            sw.WriteLine( "# This Mod YAML only contains overriding text entries, check BlackBox YAML for existing ones");
            WriteYamlLoc(sw, ModText);
            WriteToFile(sw, outPath);
        }

        public void ExportMissingModYaml(string lang, string outPath)
        {
            var missing = GetMissingLocalizations(lang, ModText);
            if (missing.Count == 0)
            {
                File.Delete(outPath);
                return;
            }

            var sw = new StringWriter();
            sw.WriteLine( "# Version 1");
            sw.WriteLine($"# This file was auto-generated by SDGameTextToEnum.exe");
            WriteMissingYamlLoc(sw, lang, missing);
            WriteToFile(sw, outPath);
        }
    }
}
