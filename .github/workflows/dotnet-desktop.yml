# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.

# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: StarDrive BlackBox Build and Test

on:
  push:
    branches: [ "develop", "patches-1.41" ]
  pull_request:
    branches: [ "develop", "patches-1.41", "feature/**" ]

jobs:
  build:

    runs-on: windows-2022  # For a list of available runner types, refer to
                           # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: StarDrive.sln
      Test_Project_Path: UnitTests/SDUnitTests.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1 # don't use '0' !!!
        lfs: true
        submodules: true

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 5.0.x
        #cache: true # requires packages.lock.json

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      run: dotnet restore $env:Solution_Name --runtime win-x86

    - name: Build solution
      #run: msbuild $env:Solution_Name /p:Configuration=Release
      run: |
        & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Msbuild\Current\Bin\MSBuild.exe" $env:Solution_Name /p:Configuration=Release

    # - name: Run Unit Tests
    #   run: dotnet test $env:Test_Project_Path --configuration Release --no-build --no-restore --verbosity normal

    - name: Run Unit Tests
      uses: microsoft/vstest-action
      with:
        testAssembly: UnitTests.dll
        searchFolder: UnitTests\bin\Release
        runInParallel: false
        runTestsInIsolation: false
        ifNoFilesFound: error
        platform: x86
      # run: |
      #   & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe" UnitTests\bin\Release\UnitTests.dll /Platform:x86 /blame
      #run: dotnet run --project UnitTests/SDUnitTests.csproj --configuration Release --arch x86 --runtime win-x86 --no-build --no-restore